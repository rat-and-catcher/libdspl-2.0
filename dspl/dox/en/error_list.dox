
/*!
\ingroup ERROR_CODE_GROUP
\def RES_OK
\brief The function completed correctly. No errors.
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_ARG_PARAM
\brief Invalid program call parameter.
This error occurs when a program is called with an invalid
the number of arguments `argc` and the pointer` argv`
to an array of program call parameters.
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_DAT_TYPE
\brief Invalid data type.
This error occurs when saving data to a binary file, when the parameter
the defining data type in memory (real or complex) is set incorrectly.
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_DIV_ZERO
\brief Division by zero error.
The function returns this error if a computational algorithm occurs
division by zero.
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_ELLIP_MODULE
\brief The modulus of the Jacobi elliptic integral must be from 0 to 1.
This error occurs when calculating Jacobi elliptic functions
if the parameter of the elliptic module is incorrectly set.
The function exits and returns the given error code.
*/



/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_FFT_SIZE
\brief The FFT size is not set correctly.
FFT size can be composite
\f$ n = n_0 \times n_1 \times n_2 \ldots \times n_p \times m \f$,
where \f$ n_i = 2,3,5,7 \f$, and \f$ m \f$ --
an arbitrary prime factor not exceeding 46340.
An error occurs when the factor \f$ m \f$ exceeds 46340 .
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_FILTER_A0
\brief Parameter \f$ a_0 \f$  cannot be zero digital for 
IIR filter transfer characteristic \f$ H (z)\f$.
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_FILTER_APPROX
\brief Unknown approximation type of digital or analog filter.
This error occurs when masks such as a digital IIR filter are incorrectly set.
The library supports the following approximations: Butterworth, 
Chebyshev of the first kind, Chebyshev of the second kind and elliptic. 
*/



/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_FILTER_FT
\brief The conversion frequencies of the low-pass filter and low-pass filter are incorrect.
Frequency masks for bandpass and bandstop filters have two cutoff frequencies or barrage frequencies. 
When implementing frequency filter conversions, it is necessary to set the left cutoff frequency less than the right.
*/

/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_FILTER_ORD
\brief The filter order is incorrect.
The order of the filter must be specified by a positive integer value.
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_FILTER_ORD_BP
\brief The order of the bandpass or notch filter is not set correctly.
The order of the bandpass and notch filter must be given an even positive value.
*/



/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_FILTER_RP
\brief The filter non-uniformity parameter in the passband is set incorrectly.
This parameter is specified in dB and must be a positive number.
*/



/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_FILTER_RS
\brief The filter suppression parameter in the boom bar is not set correctly.
This parameter is specified in dB and must be a positive number.
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_FILTER_TYPE
\brief Unknown filter type.
The library supports the following filter types: lowpass, highpass, bandpass and bandstop.
*/



/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_FILTER_WP
\brief The filter cutoff frequency parameter is set incorrectly.
The cutoff frequency of the filter must be positive from 0 to 1 for the digital FIR filter.
*/

/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_FILTER_WS
\brief The filter frequency parameter is set incorrectly.
The frequency must be a positive from 0 to 1.
*/




/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_FNAME
\brief Error in file name. You must specify the correct file name.
*/




/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_FOPEN
\brief Error opening file.
A file with the specified name cannot be opened for writing or reading.
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_FREAD_SIZE
\brief Error reading data block from binary file.
An error occurs if size of the read block does not match the required value. 
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_FWRITE_SIZE
\brief Error writing data to binary file.
An error occurs if, the size of the recorded block does not match the required value.
*/








/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_GNUPLOT_CREATE
\brief Unable to connect to the GNUPLOT package.
Please check that the package is available.
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_GNUPLOT_TERM
\brief Unknown program call parameter specifying the GNUPLOT terminal. \n
This parameter can be one of the following values: \n
`--noplot` no plotting; \ n
`--plotwin` plot in the new window; \n
`--plotpng` plot in png file. \n
*/



/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_LAPACK
\brief The built-in LAPACK function returned an error code.
This error is returned by the function if it uses one of the built-in LAPACK functions that failed.
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_MALLOC
\brief Dynamic memory allocation error.
This error means that an error occurred while dynamically allocating memory.
As a result, the `malloc` function in the body of the called function returned a` NULL` pointer.
Further processing by the function is not possible.
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_MATRIX_SIZE
\brief Matrix size error.
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_MIN_MAX
\brief The minimum value (lower bound) is greater than the maximum.
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_NEGATIVE
\brief Negative parameter.
The function returns the given error code when it takes a negative parameter.
into a variable that cannot be negative.
*/



/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_POLY_AN
\brief The senior coefficient of the polynomial is incorrectly set.
For example, when calculating the roots of a polynomial of degree \f$ N \f$
\f[P_N (x) = a_0 + a_1 x + a_2 x ^ 2 + \ ldots a_N x ^ N \f]
the leading coefficient \f$ a_N \f$ cannot be equal to zero.
*/



/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_POLY_ORD
\brief The polynomial order is incorrect.
The order of the polynomial must be a positive integer.
*/



/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_PTR
\brief Pointer error.
This error means that one of the required pointers
(memory to be allocated for) is transferred as `NULL`.
When this error occurs, the function exits
and returns the given error code.
*/



/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_RAND_SIGMA
\brief The standard deviation is incorrect
normal distribution of a random variable.
The standard deviation should be
non-negative real number.
*/



/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_RAND_TYPE
\brief Unknown pseudorandom number genration algorithm.
The following algorithms are used in the library:
\li MRG32K3A -- 32 bit algortithm MRG32K3A was developed by Pierre Lecuer.
\li MT19937-64 -- 64-bit Mersenne Twister algorithm.
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_RESAMPLE_RATIO
\brief The resampling factor is set incorrectly.
The resampling factor is given by the relation \f$ \frac{P}{Q} \f$, where
\f$ P \f$ and \f$Q\f$ are real positive numbers.
*/



/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_RESAMPLE_FRAC_DELAY
\brief Invalid fractional delay value.
The fractional delay can take values from -1 to 1, where 1 corresponds to
one sampling interval \f$ 1 / F_{\textrm{s}} \f$.
*/




/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_SIZE
\brief Error array size.
This error occurs when in addition to the pointer
the wrong input is passed to the input or output array
 size (less than or equal to zero).
If this error occurs,
the function exits and returns the given error code.
*/



/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_SYM_TYPE
\brief Parameter error of type of filling arrays in linear or logarithmic scale.
Valid fill types are symmetric and periodic.
*/



/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_UNWRAP
\brief Error in unwrap function.
The phase period and indent parameter must be positive numbers
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_WIN_PARAM
\brief window function parameter error.
Valid parameter values exist for each parametric window function.
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_WIN_SYM
\brief Symmetry or periodicity of a given window is not supported.
*/


/*!
\ingroup ERROR_CODE_GROUP
\def ERROR_WIN_TYPE
\brief Unknown window function type.
*/
